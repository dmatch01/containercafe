---

  - name: build the proxy image locally
    include: build_image.yml
    when: build_proxy_image_locally|bool

# Setting up the certs for the Proxy container

  - name: setting local CERTS
    set_fact: local_CERTS="{{lookup('env', 'HOME')}}/.openradiant/envs/{{env_name}}/"

  - name: setting remote CERTS
    set_fact: CERTS="{{ansible_env.HOME}}/.openradiant/envs/{{env_name}}/"

  - name: setting ACERTS
    set_fact: ACERTS="{{CERTS}}/admin-certs"


  - name: creating CERTS directory
    file: path={{CERTS}} state=directory mode=0755


  - name: copy local envs directory
    copy: src={{local_CERTS}} dest={{CERTS}}

  - stat: path={{ACERTS}}/hjserver.pem
    register: hjs_pem

  - name: copy the api-proxy-openssl.cnf
    copy: src=../ansible/roles/keygen-shard/files/api-proxy-openssl.cnf dest=/{{ACERTS}}/api-proxy-openssl.cnf
    when: not hjs_pem.stat.exists|bool

  - name: set PASSWD when generating certs
    set_fact: PASSWD="thesecret"
    when: not hjs_pem.stat.exists|bool

  - name: generate certs when missing or changed
    command: "{{item}} chdir={{ACERTS}}/"
    with_items:
        - openssl genrsa -out hjserver.key 4096
        - openssl req -new -key hjserver.key -out hjserver.csr -subj "/CN=localhost" -config api-proxy-openssl.cnf
        - openssl x509 -req -in hjserver.csr -CA ca.pem -CAkey ca-key.pem -CAserial ca.srl -days 1500 -extensions v3_req -out hjserver.pem -passin pass:{{PASSWD}} -extfile api-proxy-openssl.cnf
    when: not hjs_pem.stat.exists|bool

  - name: create an empty creds.json if necessary
    file: path={{CERTS}}/creds.json  state=touch

# starting the proxy container

  - name: check if the proxy container exists
    become: yes
    command: docker ps -aqf "name=api-proxy"
    register: result


  - name: remove api-proxy container if a previous instance already exists
    become: yes
    shell: docker rm -f api-proxy
    when: result.stdout !=""

  - name: start the api-proxy container, may take a few minutes to fetch the image...
    become: yes
    docker:
     name: api-proxy
     state: reloaded
     #pull: "{{image_pull_type}}"
     restart_policy: always
     image: "{{proxy_image_name}}"
     ports:
      - "8087:8087"
     volumes:
      - "{{CERTS}}:/opt/tls_certs"
     env:
        env_name={{env_name}}
